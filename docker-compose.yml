
services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"] # Command to check DB status
      interval: 5s                                  # Check every 5 seconds
      timeout: 5s                                   # Wait up to 5 seconds for a response
      retries: 5  
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # -----------------------------------------------------------------
  # 2. BACKEND SERVICE (Node.js API)
  # -----------------------------------------------------------------
  backend:
    build:
      context: ./backend # Look for the Dockerfile in the 'backend' folder
    # Map port 3000 from the container to port 3000 on your local machine
    ports:
      - "3000:3000"
    environment:
      # Use the SERVICE NAME 'db' as the hostname for connection
      DB_HOST: ${DB_HOST}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_PORT: ${DB_PORT}
      NODE_ENV: ${NODE_ENV}
    # Wait until the 'db' service is healthy before starting the backend
    # NOTE: Your Node.js app must use a connection retry mechanism!
    depends_on:
      db:
        condition: service_healthy
    # Use bind mounts for development: changes on your machine reflect in the container
    volumes:
      - ./backend:/usr/src/app # Sync local folder with container's working directory
      - /usr/src/app/node_modules # A named volume to prevent the local node_modules from overwriting the installed ones

  # -----------------------------------------------------------------
  # 3. FRONTEND SERVICE (Angular App)
  # -----------------------------------------------------------------
  frontend:
    build:
      context: ./frontend # Look for the Dockerfile in the 'frontend' folder
    # Map port 80 (Nginx default) from the container to port 4200 on your local machine
    ports:
      - "4200:80"
    depends_on:
      - backend # Wait for the backend to be ready before serving the frontend
volumes:
  postgres_data:

